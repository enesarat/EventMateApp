// <auto-generated />
using System;
using EventMate.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventMate.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230506152457_initialMigration")]
    partial class initialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventMate.Core.Model.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 5, 6, 18, 24, 57, 328, DateTimeKind.Local).AddTicks(3353),
                            IsActive = true,
                            Name = "Cinema"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 5, 6, 18, 24, 57, 328, DateTimeKind.Local).AddTicks(3367),
                            IsActive = true,
                            Name = "Music"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 5, 6, 18, 24, 57, 328, DateTimeKind.Local).AddTicks(3369),
                            IsActive = true,
                            Name = "Technology"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 5, 6, 18, 24, 57, 328, DateTimeKind.Local).AddTicks(3370),
                            IsActive = true,
                            Name = "Science"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 5, 6, 18, 24, 57, 328, DateTimeKind.Local).AddTicks(3372),
                            IsActive = true,
                            Name = "Sport"
                        });
                });

            modelBuilder.Entity("EventMate.Core.Model.Concrete.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 5, 6, 18, 24, 57, 328, DateTimeKind.Local).AddTicks(4636),
                            IsActive = true,
                            Name = "İstenbul"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 5, 6, 18, 24, 57, 328, DateTimeKind.Local).AddTicks(4640),
                            IsActive = true,
                            Name = "Ankara"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 5, 6, 18, 24, 57, 328, DateTimeKind.Local).AddTicks(4642),
                            IsActive = true,
                            Name = "İzmir"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 5, 6, 18, 24, 57, 328, DateTimeKind.Local).AddTicks(4643),
                            IsActive = true,
                            Name = "Samsun"
                        });
                });

            modelBuilder.Entity("EventMate.Core.Model.Concrete.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quota")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Sample Address",
                            CategoryId = 2,
                            CityId = 1,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 5, 6, 18, 24, 57, 328, DateTimeKind.Local).AddTicks(6152),
                            Description = "Sample Description",
                            EndDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsApproved = false,
                            Name = "Rock'n Coke",
                            Quota = 1500,
                            StartDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Address = "Sample Address",
                            CategoryId = 2,
                            CityId = 2,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 5, 6, 18, 24, 57, 328, DateTimeKind.Local).AddTicks(6164),
                            Description = "Sample Description",
                            EndDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsApproved = false,
                            Name = "90'lar Türkçe Pop",
                            Quota = 1500,
                            StartDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Address = "Sample Address",
                            CategoryId = 1,
                            CityId = 4,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 5, 6, 18, 24, 57, 328, DateTimeKind.Local).AddTicks(6166),
                            Description = "Sample Description",
                            EndDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsApproved = false,
                            Name = "Stanley Kubrick Sineması",
                            Quota = 1500,
                            StartDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Address = "Sample Address",
                            CategoryId = 3,
                            CityId = 1,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 5, 6, 18, 24, 57, 328, DateTimeKind.Local).AddTicks(6168),
                            Description = "Sample Description",
                            EndDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsApproved = false,
                            Name = "Istanbul Technology and Innovation Meeting",
                            Quota = 1500,
                            StartDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Address = "Sample Address",
                            CategoryId = 4,
                            CityId = 3,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 5, 6, 18, 24, 57, 328, DateTimeKind.Local).AddTicks(6170),
                            Description = "Sample Description",
                            EndDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsApproved = false,
                            Name = "Tesla'nın Dehası",
                            Quota = 1500,
                            StartDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Address = "Sample Address",
                            CategoryId = 5,
                            CityId = 1,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 5, 6, 18, 24, 57, 328, DateTimeKind.Local).AddTicks(6208),
                            Description = "Sample Description",
                            EndDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsApproved = false,
                            Name = "Chanpions League Finale Istanbul 23",
                            Quota = 1500,
                            StartDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EventMate.Core.Model.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 5, 6, 18, 24, 57, 328, DateTimeKind.Local).AddTicks(7575),
                            IsActive = true,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 5, 6, 18, 24, 57, 328, DateTimeKind.Local).AddTicks(7579),
                            IsActive = true,
                            Name = "Personnel"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 5, 6, 18, 24, 57, 328, DateTimeKind.Local).AddTicks(7580),
                            IsActive = true,
                            Name = "Paticipant"
                        });
                });

            modelBuilder.Entity("EventMate.Core.Model.Concrete.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("IdentifiedTicketNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Ticket");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 5, 6, 18, 24, 57, 328, DateTimeKind.Local).AddTicks(8671),
                            EventId = 1,
                            IdentifiedTicketNumber = "EA_060522_01_f3e5fac1-4e67-413a-a40f-42c8312976ae",
                            IsActive = true,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 5, 6, 18, 24, 57, 328, DateTimeKind.Local).AddTicks(8746),
                            EventId = 3,
                            IdentifiedTicketNumber = "EA_060522_01_0417e8b9-ce3f-4501-90ee-69010b1645e0",
                            IsActive = true,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 5, 6, 18, 24, 57, 328, DateTimeKind.Local).AddTicks(8750),
                            EventId = 6,
                            IdentifiedTicketNumber = "EA_060522_01_7c26f7f2-9882-4b92-8c5e-b5e3c2e2a320",
                            IsActive = true,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 5, 6, 18, 24, 57, 328, DateTimeKind.Local).AddTicks(8755),
                            EventId = 6,
                            IdentifiedTicketNumber = "EA_060522_01_f1e89230-babb-4cbc-abc0-40e5e0e3e643",
                            IsActive = true,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("EventMate.Core.Model.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastActivity")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 5, 6, 18, 24, 57, 328, DateTimeKind.Local).AddTicks(9875),
                            Email = "blackPearl@gmail.com",
                            IsActive = true,
                            Name = "Jack",
                            Password = "IMJD2023!*",
                            RoleId = 1,
                            Surname = "Sparrow"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 5, 6, 18, 24, 57, 328, DateTimeKind.Local).AddTicks(9881),
                            Email = "enesArat@gmail.com",
                            IsActive = true,
                            Name = "Enes",
                            Password = "EA2023!*",
                            RoleId = 3,
                            Surname = "Arat"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "SYSTEM",
                            CreatedDate = new DateTime(2023, 5, 6, 18, 24, 57, 328, DateTimeKind.Local).AddTicks(9883),
                            Email = "erenArat@gmail.com",
                            IsActive = true,
                            Name = "Eren",
                            Password = "EA2023!*",
                            RoleId = 3,
                            Surname = "Arat"
                        });
                });

            modelBuilder.Entity("EventMate.Core.Model.Concrete.Event", b =>
                {
                    b.HasOne("EventMate.Core.Model.Concrete.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventMate.Core.Model.Concrete.City", "City")
                        .WithMany("Events")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");
                });

            modelBuilder.Entity("EventMate.Core.Model.Concrete.Ticket", b =>
                {
                    b.HasOne("EventMate.Core.Model.Concrete.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventMate.Core.Model.Concrete.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventMate.Core.Model.Concrete.User", b =>
                {
                    b.HasOne("EventMate.Core.Model.Concrete.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EventMate.Core.Model.Concrete.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventMate.Core.Model.Concrete.City", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventMate.Core.Model.Concrete.Event", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("EventMate.Core.Model.Concrete.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EventMate.Core.Model.Concrete.User", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
